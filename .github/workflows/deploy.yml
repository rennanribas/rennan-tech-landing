name: Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Setup and Deploy to EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              sudo dnf update -y
              sudo dnf install -y docker git
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
              newgrp docker
            fi
            
            # Install Docker Compose if not present
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Configure firewall using firewalld (Amazon Linux 2023 default)
            if command -v firewall-cmd &> /dev/null; then
              sudo systemctl start firewalld
              sudo systemctl enable firewalld
              sudo firewall-cmd --permanent --add-service=ssh
              sudo firewall-cmd --permanent --add-service=http
              sudo firewall-cmd --permanent --add-service=https
              sudo firewall-cmd --reload
            fi
            
            # Clone or update repository
            PROJECT_DIR="/home/${{ secrets.EC2_USER }}/rennan-tech"
            if [ -d "$PROJECT_DIR" ]; then
              cd "$PROJECT_DIR"
              git pull origin main
            else
              git clone https://github.com/${{ github.repository }} "$PROJECT_DIR"
              cd "$PROJECT_DIR"
            fi
            
            # Stop and remove existing containers
            docker-compose down || true
            docker container rm -f rennan-tech-app rennan-tech-nginx 2>/dev/null || true
            
            # Setup SSL directory
            mkdir -p ssl
            
            # Try to get Let's Encrypt certificate if domain is provided
            if [ -n "${{ secrets.DOMAIN_NAME }}" ]; then
              if ! command -v certbot &> /dev/null; then
                sudo dnf install -y certbot
              fi
              sudo certbot certonly --standalone --non-interactive --agree-tos --email ${{ secrets.SSL_EMAIL }} -d ${{ secrets.DOMAIN_NAME }} || true
              sudo cp /etc/letsencrypt/live/${{ secrets.DOMAIN_NAME }}/fullchain.pem ssl/cert.pem 2>/dev/null || true
              sudo cp /etc/letsencrypt/live/${{ secrets.DOMAIN_NAME }}/privkey.pem ssl/key.pem 2>/dev/null || true
            fi
            
            # Generate self-signed certificate if no valid certificate exists
            if [ ! -f ssl/cert.pem ]; then
              openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                -keyout ssl/key.pem \
                -out ssl/cert.pem \
                -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost"
            fi
            
            # Build and start containers
            docker-compose up -d --build
          EOF
